import numpy as np

# Fungsi objektif: misalkan kita ingin meminimalkan risiko yang dihitung
def risk_analysis_function(params):
    # Contoh sederhana: fungsi kuadrat dari parameter
    # Dalam aplikasi nyata, ini bisa menjadi fungsi yang lebih kompleks
    return np.sum(params**2)

# Kelas Partikel
class Particle:
    def __init__(self, bounds):
        self.position = np.random.uniform(bounds[0], bounds[1], size=2)  # Misal 2 parameter
        self.velocity = np.random.uniform(-1, 1, size=2)
        self.best_position = self.position.copy()
        self.best_value = risk_analysis_function(self.position)

    def update(self, global_best_position):
        inertia_weight = 0.5
        cognitive_weight = 1.5
        social_weight = 1.5
        
        r1, r2 = np.random.rand(2)
        
        cognitive_component = cognitive_weight * r1 * (self.best_position - self.position)
        social_component = social_weight * r2 * (global_best_position - self.position)
        
        self.velocity = inertia_weight * self.velocity + cognitive_component + social_component
        self.position += self.velocity
        
        # Update best position and value
        current_value = risk_analysis_function(self.position)
        if current_value < self.best_value:
            self.best_value = current_value
            self.best_position = self.position.copy()

# Fungsi untuk menjalankan PSO
def pso(num_particles, num_iterations, bounds):
    particles = [Particle(bounds) for _ in range(num_particles)]
    global_best_position = particles[0].best_position
    global_best_value = particles[0].best_value

    for _ in range(num_iterations):
        for particle in particles:
            particle.update(global_best_position)
            if particle.best_value < global_best_value:
                global_best_value = particle.best_value
                global_best_position = particle.best_position.copy()

    return global_best_position, global_best_value

# Parameter PSO
num_particles = 30
num_iterations = 100
bounds = (-10, 10)  # Batas untuk parameter yang dioptimasi

# Menjalankan PSO untuk analisis kontingensi
best_position, best_value = pso(num_particles, num_iterations, bounds)
print(f'Best Position (Optimal Parameters): {best_position}, Best Value (Minimized Risk): {best_value}')
